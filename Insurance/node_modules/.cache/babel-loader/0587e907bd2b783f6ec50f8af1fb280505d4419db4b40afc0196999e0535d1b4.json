{"ast":null,"code":"// Validation function for mobile number\nconst validateMobileNumber = mobile => {\n  // Example validation: Check if mobile number is not empty and has 10 digits\n  return /^[0-9]{10}$/.test(mobile);\n};\n\n// Your main function handling form submission\nconst handleSubmit = () => {\n  if (isValid) {\n    const isMobileValid = validateMobileNumber(Mobile);\n    if (isMobileValid) {\n      // Construct form data for user sign-in\n      const formData = {\n        fullName: FullName,\n        mobile: Mobile,\n        email: Email,\n        password: password\n      };\n\n      // Construct property data\n      const prtyData = {\n        currentMarketValue: abc.currentMarketValue,\n        carpetArea: abc.carpetArea,\n        pincode: abc.pincode,\n        security24x7: abc.security24x7,\n        buildingAge: abc.buildingAge,\n        propertyEffect: abc.propertyEffect,\n        isSalaried: abc.isSalaried,\n        mobile: Mobile\n      };\n\n      // Send both sets of data simultaneously\n      axios.all([axios.post('http://localhost:9855/api/signin/add', formData), axios.post('http://localhost:9855/api/property/add', prtyData)]).then(axios.spread((signInResponse, propertyResponse) => {\n        // Handle both responses here\n        updateUserData({\n          FullName,\n          Mobile,\n          Email\n        });\n        navigate('/success');\n        console.log('Sign-in data saved successfully:', signInResponse.data);\n        console.log('Property data saved successfully:', propertyResponse.data);\n      })).catch(error => {\n        console.error('Error:', error);\n        // Handle error here\n      });\n    } else {\n      setErrorMessages(prevErrors => ({\n        ...prevErrors,\n        Mobile: 'Invalid mobile number.'\n      }));\n    }\n  } else {\n    console.log('Form submission failed. Please check the fields.');\n  }\n};","map":{"version":3,"names":["validateMobileNumber","mobile","test","handleSubmit","isValid","isMobileValid","Mobile","formData","fullName","FullName","email","Email","password","prtyData","currentMarketValue","abc","carpetArea","pincode","security24x7","buildingAge","propertyEffect","isSalaried","axios","all","post","then","spread","signInResponse","propertyResponse","updateUserData","navigate","console","log","data","catch","error","setErrorMessages","prevErrors"],"sources":["C:/Users/vijay/OneDrive/Desktop/Intern/InsurnaceProject - ORG - Copy (4)/Insurance/src/components/InsuranceForms/SignInPage.js"],"sourcesContent":["// Validation function for mobile number\r\nconst validateMobileNumber = (mobile) => {\r\n  // Example validation: Check if mobile number is not empty and has 10 digits\r\n  return /^[0-9]{10}$/.test(mobile);\r\n};\r\n\r\n// Your main function handling form submission\r\nconst handleSubmit = () => {\r\n  if (isValid) {\r\n    const isMobileValid = validateMobileNumber(Mobile);\r\n\r\n    if (isMobileValid) {\r\n      // Construct form data for user sign-in\r\n      const formData = {\r\n        fullName: FullName,\r\n        mobile: Mobile,\r\n        email: Email,\r\n        password: password,\r\n      };\r\n\r\n      // Construct property data\r\n      const prtyData = {\r\n        currentMarketValue: abc.currentMarketValue,\r\n        carpetArea: abc.carpetArea,\r\n        pincode: abc.pincode,\r\n        security24x7: abc.security24x7,\r\n        buildingAge: abc.buildingAge,\r\n        propertyEffect: abc.propertyEffect,\r\n        isSalaried: abc.isSalaried,\r\n        mobile: Mobile,\r\n      };\r\n\r\n      // Send both sets of data simultaneously\r\n      axios.all([\r\n        axios.post('http://localhost:9855/api/signin/add', formData),\r\n        axios.post('http://localhost:9855/api/property/add', prtyData)\r\n      ])\r\n      .then(axios.spread((signInResponse, propertyResponse) => {\r\n        // Handle both responses here\r\n        updateUserData({ FullName, Mobile, Email });\r\n        navigate('/success');\r\n        console.log('Sign-in data saved successfully:', signInResponse.data);\r\n        console.log('Property data saved successfully:', propertyResponse.data);\r\n      }))\r\n      .catch(error => {\r\n        console.error('Error:', error);\r\n        // Handle error here\r\n      });\r\n    } else {\r\n      setErrorMessages(prevErrors => ({\r\n        ...prevErrors,\r\n        Mobile: 'Invalid mobile number.',\r\n      }));\r\n    }\r\n  } else {\r\n    console.log('Form submission failed. Please check the fields.');\r\n  }\r\n};\r\n"],"mappings":"AAAA;AACA,MAAMA,oBAAoB,GAAIC,MAAM,IAAK;EACvC;EACA,OAAO,aAAa,CAACC,IAAI,CAACD,MAAM,CAAC;AACnC,CAAC;;AAED;AACA,MAAME,YAAY,GAAGA,CAAA,KAAM;EACzB,IAAIC,OAAO,EAAE;IACX,MAAMC,aAAa,GAAGL,oBAAoB,CAACM,MAAM,CAAC;IAElD,IAAID,aAAa,EAAE;MACjB;MACA,MAAME,QAAQ,GAAG;QACfC,QAAQ,EAAEC,QAAQ;QAClBR,MAAM,EAAEK,MAAM;QACdI,KAAK,EAAEC,KAAK;QACZC,QAAQ,EAAEA;MACZ,CAAC;;MAED;MACA,MAAMC,QAAQ,GAAG;QACfC,kBAAkB,EAAEC,GAAG,CAACD,kBAAkB;QAC1CE,UAAU,EAAED,GAAG,CAACC,UAAU;QAC1BC,OAAO,EAAEF,GAAG,CAACE,OAAO;QACpBC,YAAY,EAAEH,GAAG,CAACG,YAAY;QAC9BC,WAAW,EAAEJ,GAAG,CAACI,WAAW;QAC5BC,cAAc,EAAEL,GAAG,CAACK,cAAc;QAClCC,UAAU,EAAEN,GAAG,CAACM,UAAU;QAC1BpB,MAAM,EAAEK;MACV,CAAC;;MAED;MACAgB,KAAK,CAACC,GAAG,CAAC,CACRD,KAAK,CAACE,IAAI,CAAC,sCAAsC,EAAEjB,QAAQ,CAAC,EAC5De,KAAK,CAACE,IAAI,CAAC,wCAAwC,EAAEX,QAAQ,CAAC,CAC/D,CAAC,CACDY,IAAI,CAACH,KAAK,CAACI,MAAM,CAAC,CAACC,cAAc,EAAEC,gBAAgB,KAAK;QACvD;QACAC,cAAc,CAAC;UAAEpB,QAAQ;UAAEH,MAAM;UAAEK;QAAM,CAAC,CAAC;QAC3CmB,QAAQ,CAAC,UAAU,CAAC;QACpBC,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEL,cAAc,CAACM,IAAI,CAAC;QACpEF,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEJ,gBAAgB,CAACK,IAAI,CAAC;MACzE,CAAC,CAAC,CAAC,CACFC,KAAK,CAACC,KAAK,IAAI;QACdJ,OAAO,CAACI,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9B;MACF,CAAC,CAAC;IACJ,CAAC,MAAM;MACLC,gBAAgB,CAACC,UAAU,KAAK;QAC9B,GAAGA,UAAU;QACb/B,MAAM,EAAE;MACV,CAAC,CAAC,CAAC;IACL;EACF,CAAC,MAAM;IACLyB,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;EACjE;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}